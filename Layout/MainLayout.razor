@using BookingAssistantWeb.Services
@using BookingAssistantWeb.Services.Api
@using BookingAssistantWeb.Services.Api.Endpoints
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject TokenService TokenService
@inject AppsettingsService AppsettingsService
@inject HttpClient Http

@code {
  private DotNetObjectReference<MainLayout>? DotNetRef;
  private string AppsettingsPath = "appsettings.json";
  private bool _appsettingsLoaded = false;

  protected override async Task OnInitializedAsync()
  {
    // Load appsettings from JSON
    var appsettings = await Http.GetFromJsonAsync<Dictionary<string, string>>(AppsettingsPath);
    if (appsettings == null || appsettings.Count == 0)
      throw new Exception("Failed to load appsettings.");

    AppsettingsService.Load(appsettings);
    _appsettingsLoaded = true;

    // Create DotNetObjectReference for JS interop
    DotNetRef = DotNetObjectReference.Create(this);

    // Call JS to refresh token after AppsettingsService is ready
    if (string.IsNullOrEmpty(AppsettingsService.ApiServer))
      throw new Exception("ApiServer not set in AppsettingsService");

    await JS.InvokeAsync<string>("refreshAccessToken", AppsettingsService.ApiServer, DotNetRef);
    // Console.WriteLine($"JS call made with: {AppsettingsService.ApiServer}");
  }

  [JSInvokable]
  public void SetJwtToken(string token)
  {
    TokenService.AccessToken = token;
    StateHasChanged();
  }

  [JSInvokable]
  public void ClearJwtToken()
  {
    TokenService.Clear();
    StateHasChanged();
  }

  public void Dispose()
  {
    DotNetRef?.Dispose();
  }

  private async Task LogoutAsync()
  {
      // Clear the token in TokenService
      TokenService.Clear();

      // Call the logout endpoint to invalidate the session on the server
      var apiService = new ApiService(JS, AppsettingsService);
      var response = await apiService.FetchLogoutGoogleEndpoint();

      if (!response.Success)
      {
          Console.WriteLine($"Logout failed: {response.ErrorMessage}, {response.StatusCode}");
          return;
      }

      // Navigate to home page
      Navigation.NavigateTo("/");
  }

}

@if (!_appsettingsLoaded)
{
  <p>Loading...</p>
}
else
{
  <div class="page">
    <div class="sidebar">
      <NavMenu />
    </div>

    <main>
      <div class="top-row px-4">
        <button class="btn btn-link" @onclick="LogoutAsync">Log out</button>
      </div>

      <article class="content px-4">
        @Body
      </article>
    </main>
  </div>
}