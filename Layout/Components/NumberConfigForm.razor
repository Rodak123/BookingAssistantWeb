@using BookingAssistantWeb.Models
<EditForm Model="Config" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Booking Window:</label>
        <div class="d-flex gap-2">
            <input type="number" min="0" @bind="Config.BookingWindowDays" class="form-control" style="width:65px" placeholder="dny" />:
            <input type="number" min="0" max="23" @bind="Config.BookingWindowHours" class="form-control" style="width:65px" placeholder="hodiny" />:
            <input type="number" min="0" max="59" @bind="Config.BookingWindowMinutes" class="form-control" style="width:65px" placeholder="minuty" />:
            <input type="number" min="0" max="59" @bind="Config.BookingWindowSeconds" class="form-control" style="width:65px" placeholder="sekundy" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Booking Margin:</label>
        <div class="d-flex gap-2">
            <input type="number" min="0" @bind="Config.BookingMarginDays" class="form-control" style="width:65px" placeholder="dny" />:
            <input type="number" min="0" max="23" @bind="Config.BookingMarginHours" class="form-control" style="width:65px" placeholder="hodiny" />:
            <input type="number" min="0" max="59" @bind="Config.BookingMarginMinutes" class="form-control" style="width:65px" placeholder="minuty" />:
            <input type="number" min="0" max="59" @bind="Config.BookingMarginSeconds" class="form-control" style="width:65px" placeholder="sekundy" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Booking Interval:</label>
        <div class="d-flex gap-2">
            <input type="number" min="0" @bind="Config.BookingIntervalHours" class="form-control" style="width:65px" placeholder="hodiny" />:
            <input type="number" min="0" max="59" @bind="Config.BookingIntervalMinutes" class="form-control" style="width:65px" placeholder="minuty" />:
            <input type="number" min="0" max="59" @bind="Config.BookingIntervalSeconds" class="form-control" style="width:65px" placeholder="sekundy" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Pracovní doba:</label>
        <div class="d-flex gap-2">
            <input type="time" @bind="WorkingHoursStart" class="form-control" style="width:120px" /> - 
            <input type="time" @bind="WorkingHoursEnd" class="form-control" style="width:120px" />
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }

    <button type="submit" class="btn btn-primary mt-3">Uložit</button>
</EditForm>

@code {
    public class ConfigData
    {
        // Booking Window
        public int BookingWindowDays { get; set; }
        public int BookingWindowHours { get; set; }
        public int BookingWindowMinutes { get; set; }
        public int BookingWindowSeconds { get; set; }

        // Booking Margin
        public int BookingMarginDays { get; set; }
        public int BookingMarginHours { get; set; }
        public int BookingMarginMinutes { get; set; }
        public int BookingMarginSeconds { get; set; }

        // Booking Interval
        public int BookingIntervalHours { get; set; }
        public int BookingIntervalMinutes { get; set; }
        public int BookingIntervalSeconds { get; set; }
    }
    [Parameter]
    public ConfigData Config { get; set; } = new();

    [Parameter] public TimeOnly WorkingHoursStart { get; set; }
    [Parameter] public TimeOnly WorkingHoursEnd { get; set; }

    [Parameter] public PhoneNumberConfig? InitialConfig { get; set; }

    [Parameter]
    public EventCallback<(TimeSpan bookingWindow, TimeSpan bookingMargin, TimeSpan bookingInterval)>
    OnValidSubmit
    { get; set; }

    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        if (InitialConfig != null)
        {
            // rozpad hodnot z InitialConfig na části (dny, hodiny, minuty, sekundy)
            var bw = InitialConfig.BookingWindow;
            Config.BookingWindowDays = bw.Days;
            Config.BookingWindowHours = bw.Hours;
            Config.BookingWindowMinutes = bw.Minutes;
            Config.BookingWindowSeconds = bw.Seconds;

            var bm = InitialConfig.BookingMargin;
            Config.BookingMarginDays = bm.Days;
            Config.BookingMarginHours = bm.Hours;
            Config.BookingMarginMinutes = bm.Minutes;
            Config.BookingMarginSeconds = bm.Seconds;

            var bi = InitialConfig.BookingInterval;
            Config.BookingIntervalHours = bi.Hours;
            Config.BookingIntervalMinutes = bi.Minutes;
            Config.BookingIntervalSeconds = bi.Seconds;
        }
    }

    private bool Validate(out TimeSpan bookingWindow, out TimeSpan bookingMargin, out TimeSpan bookingInterval)
    {
        bookingWindow = TimeSpan.Zero;
        bookingMargin = TimeSpan.Zero;
        bookingInterval = TimeSpan.Zero;

        try
        {
            bookingWindow = new TimeSpan(
                Config.BookingWindowDays,
                Config.BookingWindowHours,
                Config.BookingWindowMinutes,
                Config.BookingWindowSeconds);

            bookingMargin = new TimeSpan(
                Config.BookingMarginDays,
                Config.BookingMarginHours,
                Config.BookingMarginMinutes,
                Config.BookingMarginSeconds);

            bookingInterval = new TimeSpan(
                Config.BookingIntervalHours,
                Config.BookingIntervalMinutes,
                Config.BookingIntervalSeconds);

            if (bookingWindow <= bookingMargin)
            {
                errorMessage = "BookingWindow musí být větší než BookingMargin!";
                return false;
            }

            if (bookingInterval <= TimeSpan.Zero)
            {
                errorMessage = "BookingInterval musí být větší než 0!";
                return false;
            }

            errorMessage = string.Empty;
            return true;
        }
        catch (Exception)
        {
            errorMessage = "Chyba při převodu hodnot. Zkontrolujte vstupy.";
            return false;
        }
    }

    private async Task HandleSubmit()
    {
        if (Validate(out var bw, out var bm, out var bi))
        {
            await OnValidSubmit.InvokeAsync((bw, bm, bi));
        }
    }
}
