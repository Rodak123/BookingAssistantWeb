@page "/add-number/paid"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AppsettingsService AppsettingsService;
@inject IJSRuntime JS

@using System.Text.Json
@using BookingAssistantWeb.Models
@using BookingAssistantWeb.Services
@using BookingAssistantWeb.Services.Api
@using BookingAssistantWeb.Services.Api.Endpoints
@using BookingAssistantWeb.Services.Api.Endpoints.Stripe

<PageTitle>Přidat číslo - Konfigurace</PageTitle>

<h3>Přidat číslo - Konfigurace</h3>

@if (phoneNumberAssignment == null)
{
    <p>Načítám</p>
}
else
{
    <p>Číšlo - @phoneNumber?.number</p>

    <EditForm Model="config">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Booking Window (hh:mm:ss):</label>
            <input type="text" @bind="config.BookingWindow" />
        </div>

        <div>
            <label>Booking Margin (hh:mm:ss):</label>
            <input type="text" @bind="config.BookingMargin" />
        </div>

        <div>
            <label>Booking Interval (hh:mm:ss):</label>
            <input type="text" @bind="config.BookingInterval" />
        </div>

        <div>
            <label>Pracovní doba od:</label>
            <input type="time" @bind="workingHoursStart" />
        </div>

        <div>
            <label>Pracovní doba do:</label>
            <input type="time" @bind="workingHoursEnd" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p style="color:red">@errorMessage</p>
        }
    </EditForm>

    <button class="btn btn-primary" @onclick="Save">Uložit</button>

    <p>@status</p>
}

@code {
    private string? sessionId = null;
    private PhoneNumberAssignment? phoneNumberAssignment;
    private PhoneNumber? phoneNumber;

    private string status = "";
    private string errorMessage = string.Empty;

    private class ConfigData
    {
        public string? BookingWindow { get; set; } = "00:30:00";
        public string? BookingMargin { get; set; } = "00:15:00";
        public string? BookingInterval { get; set; } = "00:05:00";
    }

    private ConfigData config = new();

    private TimeSpan BookingWindow;
    private TimeSpan BookingMargin;
    private TimeSpan BookingInterval;

    private TimeOnly workingHoursStart;
    private TimeOnly workingHoursEnd;

    private ApiService? apiService;
    protected override async Task OnInitializedAsync()
    {
        apiService = new(JS, AppsettingsService);

        var uri = new Uri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query))
        {
            var queryString = query.TrimStart('?');
            var parameters = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);

            foreach (var param in parameters)
            {
                var kv = param.Split('=', 2);
                if (kv.Length == 2 && kv[0] == "session_id")
                {
                    sessionId = Uri.UnescapeDataString(kv[1]);
                    break;
                }
            }
        }

        if (string.IsNullOrEmpty(sessionId))
        {
            Navigation.NavigateTo("/add-number");
        }

        if (!await LoadAddedNumber())
        {
            Navigation.NavigateTo("/add-number");
        }
    }

    private async Task<bool> LoadAddedNumber()
    {
        if (apiService == null || sessionId == null) return false;

        StripeGetPurchasedAssignmentRequest request = new()
        {
            sessionId = sessionId
        };

        ApiResponse<StripeGetPurchasedAssignmentResponse> response = await
        apiService.FetchStripeGetPurchasedAssignmentEndpoint(request);

        if (!response.Success)
            return false;

        phoneNumberAssignment = response.Data!.phoneNumberAssignment;
        StateHasChanged();

        if (phoneNumberAssignment == null)
            return false;

        GetNumberRequest getNumberRequest = new()
        {
            phoneNumberId = phoneNumberAssignment.phoneNumberId
        };
        ApiResponse<GetNumberResponse> getNumberResponse = await apiService.FetchGetNumberEndpoint(getNumberRequest);

        phoneNumber = getNumberResponse.Data!.phoneNumber;

        if (phoneNumber == null)
            return false;

        return true;
    }

    private bool Validate()
    {
        if (string.IsNullOrWhiteSpace(config.BookingWindow) ||
        string.IsNullOrWhiteSpace(config.BookingMargin) ||
        string.IsNullOrWhiteSpace(config.BookingInterval))
        {
            errorMessage = "Vyplňte prosím všechna pole.";
            return false;
        }

        try
        {
            // převod stringů na TimeSpan
            BookingWindow = TimeSpan.Parse(config.BookingWindow);
            BookingMargin = TimeSpan.Parse(config.BookingMargin);
            BookingInterval = TimeSpan.Parse(config.BookingInterval);

            if (BookingWindow <= BookingMargin)
            {
                errorMessage = "BookingWindow musí být větší než BookingMargin!";
                return false;
            }


            if (BookingInterval <= TimeSpan.Zero)
            {
                errorMessage = "BookingInterval musí být větší než 0!";
                return false;
            }

            return true;
        }
        catch (FormatException)
        {
            errorMessage = "Prosím zadejte hodnoty ve formátu hh:mm:ss a časy ve formátu hh:mm";
            return false;
        }
    }

    private async Task Save()
    {
        if (apiService == null || phoneNumberAssignment == null || sessionId == null) return;
        errorMessage = "";

        if (!Validate()) return;

        ChangeNumberConfigRequest numberConfigRequest = new()
        {
            configId = phoneNumberAssignment.phoneNumberConfigId,
            bookingWindowSeconds = (int)Math.Floor(BookingWindow.TotalSeconds),
            bookingMarginSeconds = (int)Math.Floor(BookingMargin.TotalSeconds),
            bookingIntervalSeconds = (int)Math.Floor(BookingInterval.TotalSeconds),
        };

        ApiResponse<ChangeNumberConfigResponse> numberConfigResponse = await
        apiService.FetchChangeNumberConfigEndpoint(numberConfigRequest);

        if (!numberConfigResponse.Success)
        {
            Console.WriteLine($"Failed to change config: {numberConfigResponse.ErrorMessage}, {numberConfigResponse.StatusCode}");
            errorMessage = numberConfigResponse.ErrorMessage ?? "Failed";
            return;
        }

        Navigation.NavigateTo("/home");
    }
}