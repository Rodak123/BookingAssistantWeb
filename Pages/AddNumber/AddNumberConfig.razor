@page "/add-number/paid"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AppsettingsService AppsettingsService;
@inject IJSRuntime JS

@using System.Text.Json
@using BookingAssistantWeb.Layout.Components
@using BookingAssistantWeb.Models
@using BookingAssistantWeb.Services
@using BookingAssistantWeb.Services.Api
@using BookingAssistantWeb.Services.Api.Endpoints
@using BookingAssistantWeb.Services.Api.Endpoints.Stripe

<PageTitle>Přidat číslo - Konfigurace</PageTitle>

<h3>Přidat číslo - Konfigurace</h3>

@if (phoneNumberAssignment == null)
{
    <p>Načítám</p>
}
else
{
    <p>Číšlo - @phoneNumber?.number</p>

    <NumberConfigForm Config="config" InitialConfig="phoneNumberConfig" WorkingHoursStart="workingHoursStart"
        WorkingHoursEnd="workingHoursEnd" OnValidSubmit="Save" />
}

@code {
    private string? sessionId = null;
    private PhoneNumberAssignment? phoneNumberAssignment;
    private PhoneNumberConfig? phoneNumberConfig;
    private PhoneNumber? phoneNumber;

    private NumberConfigForm.ConfigData config = new();
    private TimeOnly workingHoursStart;
    private TimeOnly workingHoursEnd;

    private ApiService? apiService;
    protected override async Task OnInitializedAsync()
    {
        apiService = new(JS, AppsettingsService);

        var uri = new Uri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query))
        {
            var queryString = query.TrimStart('?');
            var parameters = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);

            foreach (var param in parameters)
            {
                var kv = param.Split('=', 2);
                if (kv.Length == 2 && kv[0] == "session_id")
                {
                    sessionId = Uri.UnescapeDataString(kv[1]);
                    break;
                }
            }
        }

        if (string.IsNullOrEmpty(sessionId))
        {
            Navigation.NavigateTo("/add-number");
        }

        if (!await LoadAddedNumber())
        {
            Navigation.NavigateTo("/add-number");
        }
    }

    private async Task<bool> LoadAddedNumber()
    {
        if (apiService == null || sessionId == null) return false;

        StripeGetPurchasedAssignmentRequest request = new()
        {
            sessionId = sessionId
        };

        ApiResponse<StripeGetPurchasedAssignmentResponse> response = await
        apiService.FetchStripeGetPurchasedAssignmentEndpoint(request);

        if (!response.Success)
            return false;

        phoneNumberAssignment = response.Data!.phoneNumberAssignment;
        StateHasChanged();

        if (phoneNumberAssignment == null)
            return false;

        GetNumberRequest getNumberRequest = new()
        {
            phoneNumberId = phoneNumberAssignment.phoneNumberId
        };
        ApiResponse<GetNumberResponse> getNumberResponse = await apiService.FetchGetNumberEndpoint(getNumberRequest);

        phoneNumber = getNumberResponse.Data!.phoneNumber;

        if (phoneNumber == null)
            return false;

        GetNumberConfigRequest getNumberConfigRequest = new()
        {
            numberConfigId = phoneNumberAssignment.phoneNumberConfigId
        };

        ApiResponse<GetNumberConfigResponse> getNumberConfigResponse = await
        apiService.FetchGetNumberConfigEndpoint(getNumberConfigRequest);

        phoneNumberConfig = getNumberConfigResponse.Data!.phoneNumberConfig;

        if (phoneNumberConfig == null)
            return false;

        return true;
    }

    private async Task Save((TimeSpan bookingWindow, TimeSpan bookingMargin, TimeSpan bookingInterval) validatedData)
    {
        if (apiService == null || phoneNumberAssignment == null || sessionId == null) return;

        var (BookingWindow, BookingMargin, BookingInterval) = validatedData;

        ChangeNumberConfigRequest numberConfigRequest = new()
        {
            configId = phoneNumberAssignment.phoneNumberConfigId,
            bookingWindowSeconds = (int)Math.Floor(BookingWindow.TotalSeconds),
            bookingMarginSeconds = (int)Math.Floor(BookingMargin.TotalSeconds),
            bookingIntervalSeconds = (int)Math.Floor(BookingInterval.TotalSeconds),
        };

        var numberConfigResponse = await apiService.FetchChangeNumberConfigEndpoint(numberConfigRequest);

        if (!numberConfigResponse.Success)
        {
            Console.WriteLine($"Failed to change config: {numberConfigResponse.ErrorMessage}, {numberConfigResponse.StatusCode}");
            return;
        }

        Navigation.NavigateTo("/home");
    }
}