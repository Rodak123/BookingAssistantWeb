@page "/calendar"
@using BookingAssistantWeb.Services
@using BookingAssistantWeb.Services.Api
@using BookingAssistantWeb.Services.Api.Endpoints.Google

@inject HttpClient Http
@inject IJSRuntime JS
@inject TokenService TokenService
@inject AppsettingsService AppsettingsService;
@inject NavigationManager Navigation;

<PageTitle>Kalendář</PageTitle>

<h1>Povolení kalendáře Google</h1>

<p>code: @GoogleCode</p>
<p>Kaledář&nbsp;
    @if (HasCalendarConsent)
    {
        <span class="badge rounded-pill text-bg-success">Povololen</span>
    }
    else
    {
        <span class="badge rounded-pill text-bg-danger">Nepovolen</span>
    }
</p>

@if (!HasCalendarConsent)
{
    <button type="button" class="btn btn-primary" @onclick="ConsentCalendar">Povolit kalendář</button>
}


@code {
    private string? GoogleCode = null;

    public bool HasCalendarConsent = false;

    private ApiService? apiService;
    protected override async Task OnInitializedAsync()
    {
        apiService = new(JS, AppsettingsService);

        var uri = new Uri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query))
        {
            var queryString = query.TrimStart('?');
            var parameters = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);

            foreach (var param in parameters)
            {
                var kv = param.Split('=', 2);
                if (kv.Length == 2 && kv[0] == "code")
                {
                    GoogleCode = Uri.UnescapeDataString(kv[1]);
                    break;
                }
            }
        }

        await LoadCalendarConsent();
    }

    private async Task LoadCalendarConsent()
    {
        HasCalendarConsent = false;

        if (apiService == null)
            return;

        if (string.IsNullOrEmpty(GoogleCode))
            return;

        GoogleCalendarRequest request = new()
        {
            code = GoogleCode
        };
        ApiResponse<GoogleCalendarCodeResponse> response = await apiService.FetchGoogleCalendarCodeEndpoint(request);

        if (!response.Success)
        {
            Console.WriteLine($"Failed to send calendar: {response.ErrorMessage}, {response.StatusCode}");
            return;
        }

        HasCalendarConsent = true; // TODO: Load from API
    }

    private async Task ConsentCalendar()
    {
        if (apiService == null) return;

        ApiResponse<GetGoogleClientIdResponse> response = await apiService.FetchGetGoogleClientIdEndpoint();

        if (!response.Success)
        {
            Console.WriteLine($"Failed to get clientId: {response.ErrorMessage}, {response.StatusCode}");
            return;
        }

        string clientId = response.Data!.clientId;
        string redirectUri = $"{Navigation.BaseUri}calendar";

        string url = "https://accounts.google.com/o/oauth2/v2/auth?" +
        $"client_id={clientId}&" +
        $"redirect_uri={redirectUri}&" +
        "response_type=code&" +
        "scope=https://www.googleapis.com/auth/calendar&" +
        "access_type=offline&" +
        "prompt=consent";

        Console.WriteLine($"url: {redirectUri}");
        Console.WriteLine($"url: {url}");

        Navigation.NavigateTo(url, forceLoad: true);
    }
}