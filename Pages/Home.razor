@page "/home"
@using BookingAssistantWeb.Models
@using BookingAssistantWeb.Services
@using System.Text.Json
@using BookingAssistantWeb.Services.Api
@using BookingAssistantWeb.Services.Api.Endpoints
@inject HttpClient Http
@inject IJSRuntime JS
@inject TokenService TokenService
@inject AppsettingsService AppsettingsService;
@inject NavigationManager Navigation;

<PageTitle>Home</PageTitle>

<h1>Moje čísla</h1>

@if (phoneNumberPairs == null)
{
<p>Načítám...</p>
}
else
{

<button type="button" class="btn btn-primary" @onclick="RedirectAddNumber">Přidat číslo</button>
<p>Počet: @phoneNumberPairs.Count</p>

<div class="container">
    @foreach (var pair in phoneNumberPairs)
    {
        <div class="row">
            <div class="col-4">
                <span class="badge rounded-pill text-bg-info">@pair.phoneNumber.number</span>
            </div>
            <div class="col-4">
                @if(pair.phoneNumberAssignment.IsPaid)
                {
                    <span class="badge rounded-pill text-bg-success">Zaplaceno</span>
                    <p>@pair.phoneNumberAssignment.StartDate.ToLocalTime() - @pair.phoneNumberAssignment.EndDate?.ToLocalTime()</p>
                }
                else
                {
                        <span class="badge rounded-pill text-bg-danger">Nezaplaceno</span>
                    }
            </div>
            <div class="col">
             @if(pair.phoneNumberAssignment.IsPaid)
                {
                    <button type="button" class="btn btn-secondary" @onclick='() => {Navigation.NavigateTo($"/change/{pair.phoneNumberAssignment.id}");}'>Změnit nastavení</button>
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick='PayForNumber'>Zaplatit</button>
                }
            </div>
        </div>
    }
</div>
}

@code {
    public class PhoneNumberAssignmentPair
    {
        public required PhoneNumberAssignment phoneNumberAssignment { get; set; }
        public required PhoneNumber phoneNumber { get; set; }
    }

    public List<PhoneNumberAssignmentPair>? phoneNumberPairs = null;

    private ApiService? apiService;

    protected override async Task OnInitializedAsync()
    {
        apiService = new(JS, AppsettingsService);
        await LoadNumberAssignments();
    }

    private async Task LoadNumberAssignments()
    {
        if (apiService == null) return;

        ApiResponse<GetUserNumberAssignmentsResponse> numberAssignmentsResponse = await apiService.FetchGetUserNumberAssignmentsEndpoint();

        if (!numberAssignmentsResponse.Success)
        {
            Console.WriteLine($"Failed to load number assignments: {numberAssignmentsResponse.ErrorMessage}, {numberAssignmentsResponse.StatusCode}");
            return;
        }

        phoneNumberPairs = new();
        foreach (var assignment in numberAssignmentsResponse.Data!.phoneNumbersAssignments)
        {
            GetNumberRequest getNumberRequest = new(){
                phoneNumberId = assignment.phoneNumberId
            };

            ApiResponse<GetNumberResponse> numberResponse = await apiService.FetchGetNumberEndpoint(getNumberRequest);

            if(!numberResponse.Success) {
                Console.WriteLine($"Failed to load number: {numberResponse.ErrorMessage}, {numberResponse.StatusCode}");
                return;
            }

            PhoneNumber? phoneNumber = numberResponse.Data!.phoneNumber;

            if(phoneNumber == null) {
                Console.WriteLine($"Null number");
                continue;
            }

            phoneNumberPairs.Add(new() {
                phoneNumber = phoneNumber,
                phoneNumberAssignment = assignment
            });
        }
        StateHasChanged();
    }

    private void RedirectAddNumber()
    {
        Navigation.NavigateTo($"{Navigation.BaseUri}add-number");
    }

    private void PayForNumber()
    {

    }
}