@page "/add-number/{PhoneId:int}/{ModeConfigId:int}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AppsettingsService AppsettingsService;
@inject IJSRuntime JS

@using System.Text.Json
@using BookingAssistantWeb.Services
@using BookingAssistantWeb.Services.Api

<PageTitle>Nastavení čísla</PageTitle>

<h3>Nastavení čísla</h3>

<p>Pro číslo s ID: @PhoneId</p>
<p>Mód čísla ID: @ModeConfigId</p>

<EditForm Model="config">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div>
    <label>Booking Window (hh:mm:ss):</label>
    <input type="text" @bind="config.BookingWindow" />
  </div>

  <div>
    <label>Booking Margin (hh:mm:ss):</label>
    <input type="text" @bind="config.BookingMargin" />
  </div>

  <div>
    <label>Booking Interval (hh:mm:ss):</label>
    <input type="text" @bind="config.BookingInterval" />
  </div>



  <div>
    <label>Pracovní doba od:</label>
    <input type="time" @bind="workingHoursStart" />
  </div>

  <div>
    <label>Pracovní doba do:</label>
    <input type="time" @bind="workingHoursEnd" />
  </div>

  @if (!string.IsNullOrEmpty(errorMessage))
  {
    <p style="color:red">@errorMessage</p>
  }
</EditForm>

<button class="btn btn-primary" @onclick="SaveAndSend">Přidat číslo</button>

<p>@status</p>

@code {
  [Parameter]
  public int? PhoneId { get; set; }
  [Parameter]
  public int? ModeConfigId { get; set; }

  private ApiService? apiService;

  private string status = "";
  private string errorMessage = string.Empty;

  private class ConfigData
  {
    public string? BookingWindow { get; set; }
    public string? BookingMargin { get; set; }
    public string? BookingInterval { get; set; }
  }

  private ConfigData config = new();

  private TimeSpan BookingWindow;
  private TimeSpan BookingMargin;
  private TimeSpan BookingInterval;

  private TimeOnly workingHoursStart;
  private TimeOnly workingHoursEnd;


  protected override Task OnInitializedAsync()
  {
    apiService = new(JS, AppsettingsService);

    return Task.CompletedTask;
  }

  private bool Validate()
  {
    if (string.IsNullOrWhiteSpace(config.BookingWindow) ||
    string.IsNullOrWhiteSpace(config.BookingMargin) ||
    string.IsNullOrWhiteSpace(config.BookingInterval))
    {
      errorMessage = "Vyplňte prosím všechna pole.";
      return false;
    }

    try
    {
      // převod stringů na TimeSpan
      BookingWindow = TimeSpan.Parse(config.BookingWindow);
      BookingMargin = TimeSpan.Parse(config.BookingMargin);
      BookingInterval = TimeSpan.Parse(config.BookingInterval);

      if (BookingWindow <= BookingMargin)
      {
        errorMessage = "BookingWindow musí být větší než BookingMargin!";
        return false;
      }


      if (BookingInterval <= TimeSpan.Zero)
      {
        errorMessage = "BookingInterval musí být větší než 0!";
        return false;
      }

      return true;
    }
    catch (FormatException)
    {
      errorMessage = "Prosím zadejte hodnoty ve formátu hh:mm:ss a časy ve formátu hh:mm";
      return false;
    }
  }

  private async Task SaveAndSend()
  {
    if (apiService == null) return;

    AddNumberConfigRequest numberConfigRequest = new()
    {
      BookingWindowSeconds = (int)Math.Floor(BookingWindow.TotalSeconds),
      BookingMarginSeconds = (int)Math.Floor(BookingMargin.TotalSeconds),
      BookingIntervalSeconds = (int)Math.Floor(BookingInterval.TotalSeconds),
    };

    ApiResponse<AddNumberConfigResponse> numberConfigResponse = await
    apiService.FetchAddNumberConfigEndpoint(numberConfigRequest);

    if (!numberConfigResponse.Success)
    {
      Console.WriteLine($"Failed to add config: {numberConfigResponse.ErrorMessage}, {numberConfigResponse.StatusCode}");
      return;
    }
    Console.WriteLine($"Add config: {numberConfigResponse.Data?.configId}, {numberConfigResponse.StatusCode}");

    AddNumberRequest addNumberRequest = new()
    {
      ConfigId = numberConfigResponse.Data!.configId,
      PhoneId = PhoneId ?? 0
    };

    ApiResponse<AddNumberResponse> addNumberResponse = await apiService.FetchAddNumberEndpoint(addNumberRequest);

    if (addNumberResponse.Success)
    {
      status = "Saved successfully! Redirecting...";
    }
    else
    {
      Console.WriteLine($"Failed to add number: {addNumberResponse.ErrorMessage}, {addNumberResponse.StatusCode}");
      status = $"Error: {addNumberResponse.ErrorMessage}, {addNumberResponse.StatusCode}";
    }
  }
}