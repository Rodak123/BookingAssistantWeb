@page "/add-number/{PhoneId:int}/{ModeConfigId:int}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AppsettingsService AppsettingsService;
@inject IJSRuntime JS

@using System.Text.Json
@using BookingAssistantWeb.Services
@using BookingAssistantWeb.Services.Api

<PageTitle>Nastavení čísla</PageTitle>

<h3>Nastavení čísla</h3>

<p>Pro číslo s ID: @PhoneId</p>
<p>Mód čísla ID: @ModeConfigId</p>

<EditForm Model="config">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Booking Window:</label>
        <div class="d-flex gap-2">
            <input type="number" min="0" @bind="config.BookingWindowDays" class="form-control" style="width:65px" placeholder="dny" />:
            <input type="number" min="0" max="23" @bind="config.BookingWindowHours" class="form-control" style="width:65px" placeholder="hodiny" />:
            <input type="number" min="0" max="59" @bind="config.BookingWindowMinutes" class="form-control" style="width:65px" placeholder="minuty" />:
            <input type="number" min="0" max="59" @bind="config.BookingWindowSeconds" class="form-control" style="width:65px" placeholder="sekundy" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Booking Margin:</label>
        <div class="d-flex gap-2">
            <input type="number" min="0" @bind="config.BookingMarginDays" class="form-control" style="width:65px" placeholder="dny" />:
            <input type="number" min="0" max="23" @bind="config.BookingMarginHours" class="form-control" style="width:65px" placeholder="hodiny" />:
            <input type="number" min="0" max="59" @bind="config.BookingMarginMinutes" class="form-control" style="width:65px" placeholder="minuty" />:
            <input type="number" min="0" max="59" @bind="config.BookingMarginSeconds" class="form-control" style="width:65px" placeholder="sekundy" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Booking Interval:</label>
        <div class="d-flex gap-2">
            <input type="number" min="0" @bind="config.BookingIntervalHours" class="form-control" style="width:65px" placeholder="hodiny" />:
            <input type="number" min="0" max="59" @bind="config.BookingIntervalMinutes" class="form-control" style="width:65px" placeholder="minuty" />:
            <input type="number" min="0" max="59" @bind="config.BookingIntervalSeconds" class="form-control" style="width:65px" placeholder="sekundy" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Pracovní doba:</label>
        <div class="d-flex gap-2">
            <input type="time" @bind="workingHoursStart" class="form-control" style="width:120px" /> - 
            <input type="time" @bind="workingHoursEnd" class="form-control" style="width:120px" />
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }

    <button type="button" class="btn btn-primary mt-3" @onclick="SaveAndSend">Uložit konfiguraci</button>
</EditForm>

<p class="mt-2">@status</p>

@code {
    [Parameter] public int? PhoneId { get; set; }
    [Parameter] public int? ModeConfigId { get; set; }

    private string status = "";
    private string errorMessage = string.Empty;

    private class ConfigData
    {
        // Booking Window
        public int BookingWindowDays { get; set; } = 7;
        public int BookingWindowHours { get; set; } = 0;
        public int BookingWindowMinutes { get; set; } = 0;
        public int BookingWindowSeconds { get; set; } = 0;

        // Booking Margin
        public int BookingMarginDays { get; set; } = 0;
        public int BookingMarginHours { get; set; } = 0;
        public int BookingMarginMinutes { get; set; } = 15;
        public int BookingMarginSeconds { get; set; } = 0;

        // Booking Interval
        public int BookingIntervalHours { get; set; } = 0;
        public int BookingIntervalMinutes { get; set; } = 5;
        public int BookingIntervalSeconds { get; set; } = 0;
    }

    private ConfigData config = new();

    private TimeSpan BookingWindow;
    private TimeSpan BookingMargin;
    private TimeSpan BookingInterval;

    private TimeOnly workingHoursStart;
    private TimeOnly workingHoursEnd;

    private ApiService? apiService;

    protected override Task OnInitializedAsync()
    {
        apiService = new(JS, AppsettingsService);
        return Task.CompletedTask;
    }

    private bool Validate()
    {
        try
        {
            // složení z inputů do TimeSpan
            BookingWindow = new TimeSpan(
                config.BookingWindowDays,
                config.BookingWindowHours,
                config.BookingWindowMinutes,
                config.BookingWindowSeconds);

            BookingMargin = new TimeSpan(
                config.BookingMarginDays,
                config.BookingMarginHours,
                config.BookingMarginMinutes,
                config.BookingMarginSeconds);

            BookingInterval = new TimeSpan(
                config.BookingIntervalHours,
                config.BookingIntervalMinutes,
                config.BookingIntervalSeconds);

            if (BookingWindow <= BookingMargin)
            {
                errorMessage = "BookingWindow musí být větší než BookingMargin!";
                return false;
            }

            if (BookingInterval <= TimeSpan.Zero)
            {
                errorMessage = "BookingInterval musí být větší než 0!";
                return false;
            }

            errorMessage = string.Empty;
            return true;
        }
        catch (Exception)
        {
            errorMessage = "Chyba při převodu hodnot. Zkontrolujte vstupy.";
            return false;
        }
    }

    private async Task SaveAndSend()
    {
        if (apiService == null) return;

        if (!Validate()) return;

        AddNumberConfigRequest numberConfigRequest = new()
        {
            bookingWindowSeconds = (int)Math.Floor(BookingWindow.TotalSeconds),
            bookingMarginSeconds = (int)Math.Floor(BookingMargin.TotalSeconds),
            bookingIntervalSeconds = (int)Math.Floor(BookingInterval.TotalSeconds),
        };

        ApiResponse<AddNumberConfigResponse> numberConfigResponse =
            await apiService.FetchAddNumberConfigEndpoint(numberConfigRequest);

        if (!numberConfigResponse.Success)
        {
            Console.WriteLine($"Failed to add config: {numberConfigResponse.ErrorMessage}, {numberConfigResponse.StatusCode}");
            return;
        }
        Console.WriteLine($"Add config: {numberConfigResponse.Data?.configId}, {numberConfigResponse.StatusCode}");

        AddNumberRequest addNumberRequest = new()
        {
            configId = numberConfigResponse.Data!.configId,
            phoneId = PhoneId ?? 0
        };

        ApiResponse<AddNumberResponse> addNumberResponse =
            await apiService.FetchAddNumberEndpoint(addNumberRequest);

        if (addNumberResponse.Success)
        {
            status = "Saved successfully! Redirecting...";
            Navigation.NavigateTo("/success");
        }
        else
        {
            Console.WriteLine($"Failed to add number: {addNumberResponse.ErrorMessage}, {addNumberResponse.StatusCode}");
            status = $"Error: {addNumberResponse.ErrorMessage}, {addNumberResponse.StatusCode}";
        }
    }
}
