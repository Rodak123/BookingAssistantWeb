@page "/stripe/success"
@using BookingAssistantWeb.Services
@using System.Text.Json
@using BookingAssistantWeb.Services.Api
@using BookingAssistantWeb.Services.Api.Endpoints.Stripe

@inject AppsettingsService AppsettingsService
@inject TokenService TokenService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Stripe Success</PageTitle>

<h1>Stripe Success</h1>
<button @onclick="OpenPortal">Open Portal</button>

@code {
  private string? sessionId;

  private ApiService? apiService;

  protected override void OnInitialized()
  {
    apiService = new(JS, AppsettingsService);

    var uri = new Uri(Navigation.Uri);
    var query = uri.Query;

    if (!string.IsNullOrEmpty(query))
    {
      var queryString = query.TrimStart('?');
      var parameters = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);

      foreach (var param in parameters)
      {
        var kv = param.Split('=', 2);
        if (kv.Length == 2 && kv[0] == "session_id")
        {
          sessionId = Uri.UnescapeDataString(kv[1]);
          Console.WriteLine($"Session ID: {sessionId}");
          break;
        }
      }
    }
  }

  private async Task OpenPortal()
  {
    await CreatePortalSession();
  }

  protected async Task CreatePortalSession()
  {
    if (apiService == null) return;

    if (sessionId == null)
    {
      Console.WriteLine("No session ID");
      return;
    }

    StripeCreatePortalSessionRequest request = new()
    {
      sessionId = sessionId
    };

    ApiResponse<StripeCreatePortalSessionResponse> response = await
    apiService.FetchStripeCreatePortalSessionEndpoint(request);

    if (!response.Success)
    {
      Console.WriteLine($"Failed to create portal session: {response.ErrorMessage}, {response.StatusCode}");
      return;
    }

    Console.WriteLine(response.Data!.sessionUrl);
    await JS.InvokeVoidAsync("eval", $"window.location.href='{response.Data!.sessionUrl}';");
  }
}